Write a Python script to transform a dataset that solves the TASK outlined below, 
using the approach outlined in the plan below.

# TASK:
{{ problem_statement }}

# PLAN:
{{ plan }}

# PREVIOUS ATTEMPTS, IF ANY:
{{history}}

# INSTRUCTIONS
Only return the code of the transformation script, no explanations outside the code. Any explanation should
be in the comments in the code itself, but your overall answer must only consist of the code script.

Use the input datasets path and types to read the datasets.
Use the output dataset path and type to write the dataset.

BE SURE to use dataset path to read input and write output.

If the file dont exist, be sure use the right path based on the execution script location.

Always check if the output file is created. If not created raise an exception.

The script MUST be wrapped in a function called `transformation` and follow this format:

{% if environment_type == "local" %}

```python

def transformation():
    # The transformation code should be here 

if __name__ == "__main__":
    transformation()

``` 

- The code validation will be like this: 
```bash
python transformation.py
```

{% elif environment_type == "dagster" %}
For each dataset, create a dagster asset to read the dataset.

```python

import pandas as pd

import dagster as dg

@dg.asset
def <dataset_name_in_snake_case>() -> pd.DataFrame:
    ## dagster asset to read the input dataset
    


@dg.asset
def transform(<dataset_name_in_snake_case>: pd.DataFrame, ...):
    pass


defs = dg.Definitions(assets=[<dataset_name_in_snake_case>,..., transform])

``` 

- The code validation will be like this: 
```bash
dagster job execute -f transformation.py
```

{% endif %}

- Use only {{ allowed_packages }}. Do NOT use any packages that are not part of this list of the Python standard library.
